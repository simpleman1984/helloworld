var key = '0102030405060708090a0b0c0d0e0f10';
var iv = '0102030405060708090a0b0c0d0e0f10';
var iconv = require('iconv-lite');
var s = "899AF89AB9218CF8AF79C6E56805C3FD6DC01D3F9C4D833CAE1FE7532B09C2A4D6BC423705E2F0C748D7F83FB5A43CF6E3CBA9BE0FA13EFF8D655C272F9671F79885E351B13EE61E4149F22A93A4CB1B027CE87460CBE78DD8D81A7717337F337EA5206C2874E9395B0D4019D11D09B8817AD0BC47BF6236B1C30373DFFD4E4DDAC30A6CBD52A1A30A87159E556EC651389300D4D51D486BC52E4C188A9C8824899DFB186248373C0FA9630BABCD3566014A130E57BB03196DA0ECF56210B99930558FB090AE2F11EA5127684809D795FF191796088CFC917B148CC6C8D9F12661B494A67AB5CAB79F4BA0B88EF27FBDF5C5115C87DB0170D599D087B8BD860B"

var s4 = "8D80DB2E2085CADB5FA68FDD664DE43362E2535208A27EBEDEA85484553FB5FA941BED9AAED353C24E189605F6EB776298477E5CF351FEC509F4236BC05574C860E468A7633825EF74260B6031792BA047D3A628872C3B7251D325A8618C15FA6C35B81BF6B1A9BB4E4198A90446CBB3EDADBA0F874FB036FC5C5D146E9BBBE23870CBC44FA849949C91A2EC9B6CC09DDDEEE89DAC73355711ABF155F301A078F06BB63A5AF3EF8B52733397336DB177A2353B7A4E5A887546B4F8FCAA3C4644A5D2AE49D265557C540808C06556C0A82B3EFC07797E193EC619366612F7F3CB21CDA9776295D8B25931FC50F21F5B6DEBDB184497407116E9448EB3FA0005866D3250A4578EFF9A0E063F51D8BA56F2CED838AB655857B43C9D20FDA5A54FD87E1ED6C6BE6012BA871D2B0417F09CF9DBD69157BA567CFA628482B5F5ADC24740C773B92AABBAE3E5073E243BA7766AF440D3246C91D91AD4B02BFF496A61B3950F648CCDC22B28E444323085259B0D80ABA98CAB9A4A1841B83F21E045A4D2187048EBCE9DF6290669F3D1A7E828EC27FD1B5E6F8592A9FF942595F2AFE8B5A6DF4C7AB5C4F5D1826B984C1D96B676C3441D69CC3B588E01442BD6571B6DF17864424DC564BFB855A6B88A61FFB18667A9086F782FD4BBC821410A9A6EEA72235041BB6324AAFF6A35424B8291451C9653137AECFE83E406D7EB28D1E9FAD867EB11CBF4EBC1420FE8F5F9E4251D52FCA1BECDA6B23110B8826E9CB77A32340FA4F93D0F9A1F3CE5C472DCA6E95A28ABA82EB4D233DE2A62670EE97ACBDEE3B96900FAE12C441C3F2D470DD395ABBFD2A01DA1114574655FDBED111DAD17256847826D56373522234D438A136A14B32FCC29D44F8C3B2C961100DFECFFDCA2896C0C1465DA3CCA94C513132220EA162B3BDDA0F22FCF82431FAB82F7C29D9736746084C5AE42D46FF9B230800D01CF269052E7562014D51D6508A354A39F8CB0FED7938B04EE0A20C87CC72647E1746C35FDBE0693C8EADB8BC46E10A0EFAF7482120EA85DB91499FE4C45D81A330342899192C8EEAC786BFD0A8BD16C67BD62474FD764600F8998D7E0C660FB3A171FFE99C4016EC5799DADEF80DB50CE2771C9C15980AAC42A9832EAC203F6C2D3FED38A7C60DECC3EF1EDF2B095EFD5AF17FE8C71AEB7E75ABE9B03EFA309DAFF8BBFDE0B27EFA3FEE9D6531C067E4CC60E49B497C1AA2EB2CC1BA3568C0749681F525B42A6E45341E8B263CBFFB231CE83CA4AB4D1294D7F5D0023974AC4DE8F136329894A22847F2E445B999CD53B176496973840F55CBBC8C65CA1D4D1E284A59B7AD9B6AA598B577C901EEE6AFBA7853F61631C8D007C4CC3110B20B59F689AAFF08F540400164F4AACB91030E68BC7D1F7FB7B583FBBA0B885E8CBF75D02FAC77032410DA03C44978FF84E382F8767D1F43BBAE8195F4A7094AF8DDA0695000589C5BAC116A2DE41E87954AA41C1A34B1E52B7401956221E764FD8B3C54564428A02DCF18B4F08813E6FDEA311CD014A4DC7852A0819DE09C0B5843F9EB533CA5940906B704DB4BC5D3B58197349CC2A8F36DC7C32744DDF1F1A1126DE71061E2762363A849372D64445FC621F6C18523A127144D4E8D92E328124E0F7FC28DA89396E4BC5514BBA16EE03EF082C16B9A42FB66C0A564BA8CBCFEA24B953C3F2F7574DAA3B898B351B4986E95D85F34E8FC14E0F0B694DFEC5AE0B2FA53E868704D908CDA136904B25CA24FFF80E7B9679BB91F3DF6962FE5B126ADD7745A94C89BDDCC31F9A2759451B6BABB0DB48ECC6F418B384CC4E95BFF7474108BDCA768C690208028CA6F3F2DBE675230C085E54F5D34DE5F213BF158F0D5714B43AC4BF6AF5A6E4E1C72572618981C673D7D085A4E3B1CF7D6CFD7B981964FCF7EEDB8896EB7E022A16A02DC040BB37C636BB31951802F5FC3B57DB7B1862B72DC24A884FD76F48AC1A1358BDA81D4D0C82481F62A7336B6C221E886C1A344D9A1D39787BDAA4D94F1C8C4DB3A436DE1C3F1CB954FEE3B1CD2BC3D789856D438D19489F495FA0E2721FD5D7B4695B57D6C2ECB3060F0A42E12F2CB0E33E653C96F0E6C00FA1EF68DC3774A29EE01DBB0CB300605DAE07D54E4A22AD9E6F81BA9577AB88FA7F8B922BAB483DDED17CA890097744C9F8C80831318459C093636877D100E1DC1CDD561432B2C348F47DF6978773ABDBF66FF526542143E09C89560087BD0C4795D820CC4FA26D16082C7538EF780822C8E64F7302EB7E2887BD9375460DB73B0B62D8EC34E39EEB84FBB4C551E929F28F0291DA5E07C44FB694792D69B1EC94B99AF86CBB1B31273D19A940DAC067D294D708817680A90B51CBFE90AA86785F567BFFE4543C5DDD9430C297CA0F77F9E0638F81492FE97F672F65CCD8AF6D0F211FFBB1FBF21CAC1F64BD4924AACBFE3603F4A3B47D6C809D7B3EF08EC5C1EA8BDBB546C6FC6AC95ABDBD315B76B8D2BDDED98A1F86E2E28D412ACE8AE916714F83AE57F0802F71BBA67687307F883E9D89DBBB0745DA4A0488BF1B5BBDB85D0F632881980B13B1C62D865F86BED284C78D68E5AB3A6C3F5C9CE96AB3AD6D0A190D76B9A60909B79CB73FE8B8858BB2943B1A7C4284E414D01A52B204D124F34526D29C0529AADC795BC31DA212ED412988AB5B49E0CF37578683912A1D11239893BDEB6FF9EAA6EF93D5001BFD1441DAAB8A870E0065AB0AAB2607DFD8073E82210C36627F76A47B0F04B6C51A6AA8B01E8C72D5DACE7D8FE7BE43A94B4EBD2C6A60A23136FF83583D5577CBB322A516E65DEA91742AA349EEB1999B236E97A804E23634D8C737E084614D3D5FA68D3015C84D949EF9A2979C53FF62C0A260B6CC4E90D9DAADF8250EB8971ADC89528E8DE5A66E3A11A251357B0B2E5C0FE7FB44E7CC8705068576164FB7F7EF0F186EBD9BD6EC5ECA232B80E42E021433815078E9B1DF22AA150536CC395E9649CE8A16442F12EC153611AAB673DFB88E21C0EA0FA928736CEB9EE9E97A"

//参考网页
//http://extranet.cryptomathic.com/aescalc/index?key=0102030405060708090A0B0C0D0E0F10&iv=0102030405060708090A0B0C0D0E0F10&input=899AF89AB9218CF8AF79C6E56805C3FD6DC01D3F9C4D833CAE1FE7532B09C2A4D6BC423705E2F0C748D7F83FB5A43CF6E3CBA9BE0FA13EFF8D655C272F9671F79885E351B13EE61E4149F22A93A4CB1B027CE87460CBE78DD8D81A7717337F337EA5206C2874E9395B0D4019D11D09B8817AD0BC47BF6236B1C30373DFFD4E4DDAC30A6CBD52A1A30A87159E556EC651389300D4D51D486BC52E4C188A9C8824899DFB186248373C0FA9630BABCD3566014A130E57BB03196DA0ECF56210B99930558FB090AE2F11EA5127684809D795FF191796088CFC917B148CC6C8D9F12661B494A67AB5CAB79F4BA0B88EF27FBDF5C5115C87DB0170D599D087B8BD860B&mode=cbc&action=Decrypt&output=09220138E843C8F5F2399965A469E4337E2A7D732892C911DC2FA4BBF1F279F5BA8DBB49796202A83D562D40402B9213D1BE776B6B7D04C45031602E9D18D38DCCE1F5C23B217774BA736F364AF951985DA3BED987A101A002289EF60659DB5753A24914EA013362461EE7CF9245C0C98590B38742E9CD7C47415F67974D84CA72B690029F45D89A74647E98C987DF56C15FCF15631468A742FFF223235B39195E768DB67E14726556C06B73A279B06D69E2F495C43A3EDB6EE13544E9B55DFBB9AB67BF51AB0182A5F453173A12743A41F1272DA115A6682EC544005F20890D8463B0FA96A875100482AE0CF960D1F7B8150D919DA6AFD09EC385B05E9822E2


Buffer.prototype.toByteArray = function () {
    return Array.prototype.slice.call(this, 0)
}

// var b1 = new Buffer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])
// const buf4 = Buffer.from(iv);
// console.info(buf4.toString('hex'));

var xml="<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\
<root>\n\
<common>\n\
<building_id>1234567020</building_id>\n\
<gateway_id>123456702150</gateway_id>\n\
<type>request</type>\n\
</common>\n\
<id_validate operation=\"request\" />\n\
    </root>"

var crypto = require('crypto');

function encrypt(plaintext) {
    var decipher  = crypto.createCipher('aes-256-cbc', iv);
    decipher.setAutoPadding(true);
    var decrypted = decipher.update(plaintext,'utf8', 'hex');
    decrypted += decipher.final('hex');
    return decrypted;
}

function decrypt(plaintext) {
    var decipher  = crypto.createDecipher('aes-256-ctr',key, iv);
    var decrypted = decipher .update(plaintext, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}
var s1 = encrypt(xml);
//console.info(s1);
var s2 = decrypt(s1);
//console.info(s2);

// var v = Buffer.from(tt, 'hex')

//var buf = iconv.encode(str, 'GBK');

var newkey = Buffer.from([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]);
var newiv  = Buffer.from([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]);

console.info("加密前:",Buffer.from(xml,"utf8").toString("hex"))
var befores = encrypt1(xml,newkey,newiv);
console.info("加密后============",befores.toString("hex"));
console.info("解密前:"+s)
var befores = Buffer.from(s,"hex");
var s3 = decrypt1(befores,newkey,newiv);

function decrypt1(plaintext,key,iv) {
    console.info("解密前 before decipheriv:",Buffer.from(plaintext,'hex'))
    console.info("key:",key)
    console.info("iv:",iv)
    var decipher  = crypto.createDecipheriv('aes-128-cbc',key,iv);
    decipher.setAutoPadding(false)
    var decrypted = decipher.update(plaintext);
    var all = Buffer.concat([decrypted,decipher.final()]);

    console.info("decrypted result:",all)
    console.info("decrypted result_16进制:",all.toString("hex"))
    
    
    console.info("=====",iconv.decode(all, 'ISO-8859-1'))
    console.info("=====",iconv.decode(all, 'utf8'))
    console.info("=====",iconv.decode(all, 'gbk'))
    console.info("=====",iconv.decode(all, 'GB2312'))
    return all;
}


function encrypt1(plaintext,key,iv) {
    var decipher  = crypto.createCipheriv('aes-128-cbc',key, iv);
    decipher.setAutoPadding(true);
    var encrypted = decipher.update(plaintext,"utf8");
    var all = Buffer.concat([encrypted,decipher.final()]);
    return all;
}

// var ciphertext = encrypt(new Buffer("aaaaaaaaaaaaaaaaaaa").toString('utf8'));
// console.info(ciphertext)

// var crypto = require('crypto');
// var cipher = crypto.createCipheriv('aes-128-cbc', key, iv);
// cipher.setAutoPadding(false);
// var crypted = cipher.update(data, 'utf8', 'binary');

